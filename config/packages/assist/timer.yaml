timer:
  va_timer1:
    name: "Timer 1"
  va_timer2:
    name: "Timer 2"
  va_timer3:
    name: "Timer 3"

input_text:
  va_timer1:
    name: Timer 1
    initial: "Timer 1"
  va_timer2:
    name: Timer 2
    initial: "Timer 2"
  va_timer3:
    name: Timer 3
    initial: "Timer 3"

input_select:
  timer_sound_options:
    name: Timer Sound Options
    options:
      - 'argon'
      - 'interface-hint-notification-911'
      - 'aggressive-medium-sized-dog-growling-56'
      - 'angry-and-agitated-dog-growling-53'
      - 'annoyed-big-dog-barking-51'
      - 'cartoon-insect-buzzing-31'
      - 'giant-dog-aggressive-growl-59'
      - 'home-standard-ding-dong-109'
      - 'retro-game-emergency-alarm-1000'
      - 'scanning-sci-fi-alarm-905'
      - 'security-facility-breach-alarm-994'
      - 'warning-alarm-buzzer-991'
      # Add more sound options as needed
    initial: 'argon'

  timer_media_player:
    name: Timer Media Player
    options:
      - 'kitchen_speaker'
      - 'living_room_speaker'
      - 'master_bedroom_speaker'
      # Add more media player options

automation:
  - id: 'timer_finished_alarm_001'
    alias: "Timer Finished Alarm"
    trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.va_timer1
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.va_timer2
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.va_timer3

    variables:
      text_entity: "input_text.{{ trigger.event.data.entity_id.split('.')[1] }}"
      reminder_prefix: "Erinnerung an:"
      text: "{{ states(text_entity) }}"
      message: "{{ reminder_prefix }} {{ text }}"
      language: en-NZ
      voice: MollyNeural
      alarm: "{{ ['alarm!', 'beep!', 'siren!', 'horn!', 'whistle!', 'bell!', 'trumpet!', 'ding!'] | random }}"

    condition: []
    action:
    - wait_for_trigger:
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.va_timer1
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.va_timer2
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.va_timer3
    - service: notify.persistent_notification
      data:
        title: "Timer Finished"
        # message: "Timer {{ trigger.event.data.entity_id.split('.')[1] }} finished!"
        message: "Timer {{ text }} finished!"
    - repeat:
        count: 2
        sequence:
        - service: media_player.play_media
          data_template:
            entity_id: "media_player.{{ states('input_select.timer_media_player') }}"
            media_content_id: "media-source://tts/cloud?message={{ text }}&language={{ language }}&voice={{ voice }}"
            media_content_type: provider
        - delay:
            seconds: 2
        - service: media_player.play_media
          data_template:
            entity_id: "media_player.{{ states('input_select.timer_media_player') }}"
            media_content_id: "media-source://media_source/local/alarms/{{ states('input_select.timer_sound_options') }}.mp3"
            media_content_type: audio/mpeg
        - delay:
            seconds: "{{ state_attr('media_player.' ~ states('input_select.timer_media_player'), 'media_duration') }}"
script:
  set_timer_start:
    variables:
      entity: >
        {% if states('timer.va_timer1') != 'active' and states('timer.va_timer1') != 'paused' %}
          va_timer1
        {% elif states('timer.va_timer2') != 'active' and states('timer.va_timer2') != 'paused' %}
          va_timer2
        {% else %}
          va_timer3
        {% endif%}
    sequence:
      - service: input_text.set_value
        target:
          entity_id: "input_text.{{ entity }}"
        data:
          value: "{{ reminder }}"
      - service: timer.start
        data:
          duration: "{{ hours | default(0) }}:{{ minutes | default(0) }}:{{ seconds | default(0) }}"
        target:
          entity_id: "timer.{{ entity }}"

      ### If you want to save the area where assist was activate
      ### Only with esphome devices, no phone or browser
      - service: input_text.set_value
        target:
          entity_id: >
            {% if states('timer.va_timer1') != 'active' and states('timer.va_timer1') != 'paused' %} input_text.vva_timer1_area
            {% elif states('timer.va_timer2') != 'active' and states('timer.va_timer2') != 'paused' %} input_text.va_timer2_area
            {% else %} input_text.va_va_timer3_area{% endif%}
        data:
          value: > ### Change sensor_suffix to match your installation.
            {% set sensor_suffix = "processing" %}
            {% set active_sensor = states.binary_sensor | selectattr('entity_id', 'match', '.*' + sensor_suffix + '$') | selectattr('state', 'eq', 'on') | first %}
            {{ area_name(active_sensor.entity_id) if active_sensor else 'Unknown' }}

  set_timer_stop:
    variables:
      entity: >
        {% if states('timer.va_timer1') != 'active' and states('timer.va_timer1') != 'paused' %}
          va_timer1
        {% elif states('timer.va_timer2') != 'active' and states('timer.va_timer2') != 'paused' %}
          va_timer2
        {% else %}
          va_timer3
        {% endif%}
    sequence:
      - service: input_text.set_value
        target:
          entity_id: "input_text.{{ entity }}"
        data:
          value: "{{ reminder }}"
      - service: timer.start
        data:
          duration: "{{ hours | default(0) }}:{{ minutes | default(0) }}:{{ seconds | default(0) }}"
        target:
          entity_id: "timer.{{ entity }}"

intent_script:
  TimerStart:
    action:
      - service: script.set_timer_start
        data:
          hours: "{{ hours | default(0) | int(0) }}"
          minutes: "{{ minutes | default(0) | int(0) }}"
          seconds: "{{ seconds | default(0) | int(0) }}"
          reminder: "{{ reminder if reminder is defined else '' }}"

  TimerStop:
    async_action: true
    action:
      - delay:
          seconds: 10
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states(entity_id) == 'active' }}"
              - condition: template
                value_template: "{{ entity_id != 'all' }}"
            sequence:
              - service: timer.cancel
                target:
                  entity_id: "{{ entity_id }}"
          - conditions:
              - condition: or
                conditions:
                  - condition: template
                    value_template: "{{ (states.timer|selectattr('state','eq','active')|list|length == 1 and entity_id == 'null') }}"
                  - condition: template
                    value_template: "{{ entity_id == 'all' and states.timer|selectattr('state','eq','active')|list|length > 0 }}"
            sequence:
              - service: timer.cancel
                target:
                  entity_id: "{{ states.timer | selectattr('state','eq','active') | map(attribute='entity_id') | join(', ') }}"

  TimerDuration:
    async_action: true
    action:
      - stop: ""
